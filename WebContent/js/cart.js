function shoppingCart(t) { this.cartName = t, this.clearCart = !1, this.checkoutParameters = {}, this.items = [], this.loadItems(); var e = this; $(window).unload(function () { e.clearCart && e.clearItems(), e.saveItems(), e.clearCart = !1 }) } function checkoutParameters(t, e, a) { this.serviceName = t, this.merchantID = e, this.options = a } function cartItem(t, e, a, i) { this.code = t, this.name = e, this.price = 1 * a, this.quantity = 1 * i } shoppingCart.prototype.loadItems = function () { var t = null != localStorage ? localStorage[this.cartName + "_items"] : null; if (null != t && null != JSON) try { for (var t = JSON.parse(t), e = 0; e < t.length; e++) { var a = t[e]; null != a.code && null != a.name && null != a.price && null != a.quantity && (a = new cartItem(a.code, a.name, a.price, a.quantity), this.items.push(a)) } } catch (i) { } }, shoppingCart.prototype.saveItems = function () { null != localStorage && null != JSON && (localStorage[this.cartName + "_items"] = JSON.stringify(this.items)) }, shoppingCart.prototype.addItem = function (t, e, a, i) { if (i = this.toNumber(i), 0 != i) { for (var r = !1, o = 0; o < this.items.length && !r; o++) { var s = this.items[o]; s.code == t && (r = !0, s.quantity = this.toNumber(s.quantity + i), s.quantity <= 0 && this.items.splice(o, 1)) } if (!r) { var s = new cartItem(t, e, a, i); this.items.push(s) } this.saveItems() } }, shoppingCart.prototype.getTotalPrice = function (t) { for (var e = 0, a = 0; a < this.items.length; a++) { var i = this.items[a]; (null == t || i.code == t) && (e += this.toNumber(i.quantity * i.price)) } return e }, shoppingCart.prototype.getTotalCount = function (t) { for (var e = 0, a = 0; a < this.items.length; a++) { var i = this.items[a]; (null == t || i.code == t) && (e += this.toNumber(i.quantity)) } return e }, shoppingCart.prototype.clearItems = function () { this.items = [], this.saveItems() }, shoppingCart.prototype.addCheckoutParameters = function (t, e, a) { if ("PayPal" != t) throw "serviceName must be 'PayPal'."; if (null == e) throw "A merchantID is required in order to checkout."; this.checkoutParameters[t] = new checkoutParameters(t, e, a) }, shoppingCart.prototype.checkout = function (t, e) { if (null == t) { var a = this.checkoutParameters[Object.keys(this.checkoutParameters)[0]]; t = a.serviceName } if (null == t) throw "Use the 'addCheckoutParameters' method to define at least one checkout service."; var i = this.checkoutParameters[t]; if (null == i) throw "Cannot get checkout parameters for '" + t + "'."; switch (i.serviceName) { case "PayPal": this.checkoutPayPal(i, e); break; default: throw "Unknown checkout service: " + i.serviceName } }, shoppingCart.prototype.checkoutPayPal = function (t, e) { for (var a = { cmd: "_cart", business: t.merchantID, upload: "1", rm: "2", charset: "utf-8" }, i = 0; i < this.items.length; i++) { var r = this.items[i], o = i + 1; a["item_number_" + o] = r.code, a["item_name_" + o] = r.name, a["quantity_" + o] = r.quantity, a["amount_" + o] = r.price.toFixed(2), a.shipping_1 = 1.75, a.tax_cart = 15 * this.getTotalPrice() / 100 } var s = $("<form/></form>"); s.attr("action", "https://www.sandbox.paypal.com/us/cgi-bin/webscr"), s.attr("method", "POST"), s.attr("style", "display:none;"), this.addFormFields(s, a), this.addFormFields(s, t.options), $("body").append(s), this.clearCart = null == e || e, s.submit(), s.remove() }, shoppingCart.prototype.addFormFields = function (t, e) { null != e && $.each(e, function (e, a) { if (null != a) { var i = $("<input></input>").attr("type", "hidden").attr("name", e).val(a); t.append(i) } }) }, shoppingCart.prototype.toNumber = function (t) { return t = 1 * t, isNaN(t) ? 0 : t };